Index: app/User.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nnamespace App;\r\n\r\nuse App\\Builders\\UserBuilder;\r\nuse App\\Models\\Book;\r\nuse App\\Models\\Contact;\r\nuse App\\Models\\Post;\r\nuse App\\Traits\\HasUuid;\r\nuse App\\Traits\\OverridesBuilder;\r\nuse Illuminate\\Contracts\\Auth\\MustVerifyEmail;\r\nuse Illuminate\\Foundation\\Auth\\User as Authenticatable;\r\nuse Illuminate\\Notifications\\Notifiable;\r\nuse Illuminate\\Support\\Facades\\Hash;\r\nuse Tymon\\JWTAuth\\Contracts\\JWTSubject;\r\nuse Tymon\\JWTAuth\\JWT;\r\n\r\nclass User extends Authenticatable implements JWTSubject\r\n{\r\n    use Notifiable;\r\n    use HasUuid;\r\n    use OverridesBuilder;\r\n\r\n    protected $table ='users';\r\n    /**\r\n     * The attributes that are mass assignable.\r\n     *\r\n     * @var array\r\n     */\r\n    protected $fillable = [\r\n        'name', 'email', 'password',\r\n    ];\r\n\r\n    /**\r\n     * The attributes that should be hidden for arrays.\r\n     *\r\n     * @var array\r\n     */\r\n    protected $hidden = [\r\n        'password', 'remember_token',\r\n    ];\r\n\r\n    /**\r\n     * The attributes that should be cast to native types.\r\n     *\r\n     * @var array\r\n     */\r\n    protected $casts = [\r\n        'email_verified_at' => 'datetime',\r\n    ];\r\n\r\n\r\n    /**\r\n     * @return mixed\r\n     */\r\n    public function getJWTIdentifier()\r\n    {\r\n        return $this->getKey();\r\n    }\r\n\r\n    /**\r\n     * @return array\r\n     */\r\n    public function getJWTCustomClaims()\r\n    {\r\n        return [];\r\n    }\r\n\r\n    /**\r\n     * @param $value\r\n     */\r\n    public function setPasswordAttribute($value)\r\n    {\r\n        $this->attributes['password'] = bcrypt($value);\r\n    }\r\n\r\n    public function provideCustomBuilder()\r\n    {\r\n        return UserBuilder::class;\r\n    }\r\n\r\n    private static $whiteListFilter = ['*'];\r\n\r\n\r\n    public function books()\r\n    {\r\n        return $this->hasMany(Book::class);\r\n    }\r\n\r\n    public function contacts()\r\n    {\r\n        return $this->hasMany(Contact::class);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/User.php	(revision 699ac872ef3b2d2d3db3ac4dd87a7cf943cfbe13)
+++ app/User.php	(date 1604482463807)
@@ -91,4 +91,7 @@
     {
         return $this->hasMany(Contact::class);
     }
+    public function Posts(){
+        return $this->hasMany(Post::class);
+    }
 }
